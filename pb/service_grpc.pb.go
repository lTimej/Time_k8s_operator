// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: proto/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_CreateSpace_FullMethodName       = "/pb.Service/createSpace"
	Service_StartSpace_FullMethodName        = "/pb.Service/startSpace"
	Service_DeleteSpace_FullMethodName       = "/pb.Service/deleteSpace"
	Service_StopSpace_FullMethodName         = "/pb.Service/stopSpace"
	Service_GetPodSpaceStatus_FullMethodName = "/pb.Service/getPodSpaceStatus"
	Service_GetPodSpaceInfo_FullMethodName   = "/pb.Service/getPodSpaceInfo"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// 创建云IDE空间并等待Pod状态变为Running,第一次创建,需要挂载存储卷
	CreateSpace(ctx context.Context, in *WorkspaceInfo, opts ...grpc.CallOption) (*WorkspaceRunningInfo, error)
	// 启动(创建)云IDE空间,非第一次创建,无需挂载存储卷,使用之前的存储卷
	StartSpace(ctx context.Context, in *WorkspaceInfo, opts ...grpc.CallOption) (*WorkspaceRunningInfo, error)
	// 删除云IDE空间,需要删除存储卷
	DeleteSpace(ctx context.Context, in *QueryOption, opts ...grpc.CallOption) (*Response, error)
	// 停止(删除)云工作空间,无需删除存储卷
	StopSpace(ctx context.Context, in *QueryOption, opts ...grpc.CallOption) (*Response, error)
	// 获取Pod运行状态
	GetPodSpaceStatus(ctx context.Context, in *QueryOption, opts ...grpc.CallOption) (*WorkspaceStatus, error)
	// 获取云IDE空间Pod的信息
	GetPodSpaceInfo(ctx context.Context, in *QueryOption, opts ...grpc.CallOption) (*WorkspaceRunningInfo, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) CreateSpace(ctx context.Context, in *WorkspaceInfo, opts ...grpc.CallOption) (*WorkspaceRunningInfo, error) {
	out := new(WorkspaceRunningInfo)
	err := c.cc.Invoke(ctx, Service_CreateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) StartSpace(ctx context.Context, in *WorkspaceInfo, opts ...grpc.CallOption) (*WorkspaceRunningInfo, error) {
	out := new(WorkspaceRunningInfo)
	err := c.cc.Invoke(ctx, Service_StartSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteSpace(ctx context.Context, in *QueryOption, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Service_DeleteSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) StopSpace(ctx context.Context, in *QueryOption, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Service_StopSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetPodSpaceStatus(ctx context.Context, in *QueryOption, opts ...grpc.CallOption) (*WorkspaceStatus, error) {
	out := new(WorkspaceStatus)
	err := c.cc.Invoke(ctx, Service_GetPodSpaceStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetPodSpaceInfo(ctx context.Context, in *QueryOption, opts ...grpc.CallOption) (*WorkspaceRunningInfo, error) {
	out := new(WorkspaceRunningInfo)
	err := c.cc.Invoke(ctx, Service_GetPodSpaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// 创建云IDE空间并等待Pod状态变为Running,第一次创建,需要挂载存储卷
	CreateSpace(context.Context, *WorkspaceInfo) (*WorkspaceRunningInfo, error)
	// 启动(创建)云IDE空间,非第一次创建,无需挂载存储卷,使用之前的存储卷
	StartSpace(context.Context, *WorkspaceInfo) (*WorkspaceRunningInfo, error)
	// 删除云IDE空间,需要删除存储卷
	DeleteSpace(context.Context, *QueryOption) (*Response, error)
	// 停止(删除)云工作空间,无需删除存储卷
	StopSpace(context.Context, *QueryOption) (*Response, error)
	// 获取Pod运行状态
	GetPodSpaceStatus(context.Context, *QueryOption) (*WorkspaceStatus, error)
	// 获取云IDE空间Pod的信息
	GetPodSpaceInfo(context.Context, *QueryOption) (*WorkspaceRunningInfo, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) CreateSpace(context.Context, *WorkspaceInfo) (*WorkspaceRunningInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpace not implemented")
}
func (UnimplementedServiceServer) StartSpace(context.Context, *WorkspaceInfo) (*WorkspaceRunningInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSpace not implemented")
}
func (UnimplementedServiceServer) DeleteSpace(context.Context, *QueryOption) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpace not implemented")
}
func (UnimplementedServiceServer) StopSpace(context.Context, *QueryOption) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSpace not implemented")
}
func (UnimplementedServiceServer) GetPodSpaceStatus(context.Context, *QueryOption) (*WorkspaceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodSpaceStatus not implemented")
}
func (UnimplementedServiceServer) GetPodSpaceInfo(context.Context, *QueryOption) (*WorkspaceRunningInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodSpaceInfo not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CreateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateSpace(ctx, req.(*WorkspaceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_StartSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).StartSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_StartSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).StartSpace(ctx, req.(*WorkspaceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteSpace(ctx, req.(*QueryOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_StopSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).StopSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_StopSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).StopSpace(ctx, req.(*QueryOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetPodSpaceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetPodSpaceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetPodSpaceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetPodSpaceStatus(ctx, req.(*QueryOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetPodSpaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetPodSpaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetPodSpaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetPodSpaceInfo(ctx, req.(*QueryOption))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createSpace",
			Handler:    _Service_CreateSpace_Handler,
		},
		{
			MethodName: "startSpace",
			Handler:    _Service_StartSpace_Handler,
		},
		{
			MethodName: "deleteSpace",
			Handler:    _Service_DeleteSpace_Handler,
		},
		{
			MethodName: "stopSpace",
			Handler:    _Service_StopSpace_Handler,
		},
		{
			MethodName: "getPodSpaceStatus",
			Handler:    _Service_GetPodSpaceStatus_Handler,
		},
		{
			MethodName: "getPodSpaceInfo",
			Handler:    _Service_GetPodSpaceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
